import datetime #import library of datetime for using in date of birth format-validation
from entities import Course, Student , Trainer , Assignment , EmptyString 

class User_Interface:   #Class gia ton User_interface

    @staticmethod
    def checkChoices(message,options,errorMessage):
        inputVal = input(message).upper()
        while inputVal not in options:
            print(errorMessage)
            print()
            inputVal = input(message).upper()
        return inputVal
        
    @staticmethod
    def checkChoicesRaw(message,options,errorMessage):
        inputVal = input(message)
        while inputVal not in options:
            print(errorMessage)
            print()
            inputVal = input(message)
        return inputVal
    
    @staticmethod
    def checkEmpty(message,errorMessage):
        inputVal = input(message)
        while EmptyString(inputVal).check_for_blank():
            print(errorMessage)
            print()
            inputVal = input(message)
        return inputVal
        
    @staticmethod
    def checkDate(message,dateFormat,errorMessage):
        inputVal = input(message)
        while True:
            try:
                return datetime.datetime.strptime(inputVal, dateFormat)
            except: 
                print(errorMessage)
                print()
                inputVal = input(message)
                
    @staticmethod
    def checkFloat(message,errorMessage):
        inputVal = input(message)
        while True:
            try:
                return float(inputVal)
            except: 
                print(errorMessage)
                print()
                inputVal = input(message)
    
    @staticmethod
    def checkInt(message,errorMessage):
        inputVal = input(message)
        while True:
            try:
                return int(inputVal)
            except: 
                print(errorMessage)
                print()
                inputVal = input(message)

    @staticmethod
    def divider(number_of_lines,mid_word=''): ##function for design of menu with lines
        draw=' '
        for i in range(int(number_of_lines/2)):
            draw+="-"
        draw+=mid_word
        for i in range(number_of_lines-int(number_of_lines/2)):
            draw+="-"
        return draw

    @staticmethod
    def Pre_Menu1(): ##1st menu appear to user 
        print('\n\n','Welcome to the Private School Structure'.center(80))
        print('Please choose something from the menu'.center(82))
        print('\n\n'+User_Interface.divider(70,' MENU '))
        print('1. Menu for Data Input')
        print('2. Menu for Data Visualization')
        print('3. Exit')
        print(User_Interface.divider(79))
        return int(User_Interface.checkChoices('Enter your choice [1-3]: ',['1','2','3'],'Wrong Choise..Please enter an integer between 1-3.'))
    
    @staticmethod
    def Input_menu():  ##input menu
        print('\n\n'+User_Interface.divider(60,'DATA INPUT MENU'))
        print()
        print('1. Courses ')
        print('2. Trainers ')
        print('3. Students ')
        print('4. Assignments ')
        print('5. Exit')
        print(User_Interface.divider(79))
        ch = int(User_Interface.checkChoices('Enter your choice [1-5]: ',['1','2','3','4','5'],'Wrong Choise..Please enter an integer between 1-5.'))
        print(User_Interface.divider(79))
        return ch
    
    @staticmethod
    def course_func(course_list,top=False): ##fuction for courses inputs
        if top:
            print('Please give the info about the courses.\n')
        autodec = User_Interface.checkChoices("You would like to input data or should the program generate for you? Type 'm' for manual input or 'a' for autogenerated:",['M','A'],'Wrong choice!')
        if autodec == 'A':
            while True:
                try:
                    course_list.appendUnique(Course(auto=True)) #fill data with dummy data since choise was autogenerate.
                    break
                except:
                    None
        else:
            print("Course's availabe Languages: "+','.join([lang.capitalize() for lang in Course.languages])+".")
            course_language = User_Interface.checkChoices("Give Course's Language: ",[lang.upper() for lang in Course.languages],'Wrong language.Please give one of: '+','.join([lang.capitalize() for lang in Course.languages])+'.').lower()
            course_title = User_Interface.checkEmpty("Give Course's Title : ","Wrong input.No data inserted.Please try again.")
            while course_list.courseLookup(course_title,course_language) is not None:
                print('Title already exists. Please give a unique title.')
                course_title = User_Interface.checkEmpty("Give Course's Title : ","Wrong input.No data inserted.Please try again.")
            course_description = User_Interface.checkEmpty("Give Course's Description : ","Wrong input.No data inserted.Please try again.")
            print("Course's availabe types: "+','.join([cType.capitalize() for cType in Course.types]))
            course_type = User_Interface.checkChoices("Give Course's Type: ",[cType.upper() for cType in Course.types],'Wrong type.Please give one of: '+','.join([cType.capitalize() for cType in Course.types])).lower()
            course_list.append(Course(lang=course_language,title=course_title,description=course_description,course_type=course_type)) #Courses fill with the info
            
        anotherDec = User_Interface.checkChoices("Want to add another course? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
        if anotherDec == 'Y':
            User_Interface.course_func(course_list)
        else:
            print('\n')
            print('Courses Input completed succesfully.')
        return course_list
    
    @staticmethod
    def Students_func(students,course_list,top=False): ##fuction for Students inputs
        if len(course_list) < 1:
            print("The list with the courses is empty. You can't input students.\n Please input the courses first.")
            return students
        if top:
            print('Please give the info about the Students.\n')
            
        student_firstname = User_Interface.checkEmpty("Give Student's first name: ","Wrong input.No data inserted.Please try again.")
        student_lastname = User_Interface.checkEmpty("Give Student's last name: ","Wrong input.No data inserted.Please try again.")
        student_birth = User_Interface.checkDate('Give date of birth using the following format : YYYY-MM-DD: ',"%Y-%m-%d","This is the incorrect date string format.It should be YYYY-MM-DD")
        student_fees = User_Interface.checkFloat("Give Student's tuition fees: ",'Wrong data type, please give a float number.')
        
        student_courses = []
        anotherLang = 'Y'
        while anotherLang == 'Y':
            print("Choose Student's language from the following language's list: "+','.join([lang.capitalize() for lang in Course.languages])+".")
            print([lang.upper() for lang in Course.languages])
            course_language = User_Interface.checkChoices("Please input the student's Language: ",[lang.upper() for lang in Course.languages],'Wrong language.Please give one of: '+','.join([lang.capitalize() for lang in Course.languages])+'.').lower()
            while len(course_list.languageLookup(course_language)) == 0:
                print('List of courses for this Language is Empty. Please choose another language')
                course_language = User_Interface.checkChoices("Please input the student's Language: ",[lang.upper() for lang in Course.languages],'Wrong language.Please give one of: '+','.join([lang.capitalize() for lang in Course.languages])+'.').lower()
            
            anotherTitle = 'Y'
            while anotherTitle == 'Y':
                print('Please choose a course title for the student, from the following list:')
                print(f"{','.join([course.title for course in course_list.languageLookup(course_language) if course.title not in student_courses])}")
                student_courses_input = User_Interface.checkChoicesRaw('Please input the title: ',[course.title for course in course_list.languageLookup(course_language)],"Wrong input.Please try again.")
                while student_courses_input in student_courses:
                    print("You already input this title. Please try another title.")
                    student_courses_input = User_Interface.checkChoicesRaw('Please input the title: ',[course.title for course in course_list.languageLookup(course_language)],"Wrong input.Please try again.")
                student_courses.append(student_courses_input)
                if len([course for course in course_list.languageLookup(course_language) if course.title not in student_courses]) == 0:
                    print("No other unique titles available for this language")
                    break
                else:
                    anotherTitle = User_Interface.checkChoices("Want to add another course for this language? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
                    
            anotherLang = User_Interface.checkChoices("Want to add another language for the student? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
        
        students.append(Student( name = student_firstname, lastname = student_lastname, dob = student_birth, fees = student_fees, courses = student_courses))
        anotherDec = User_Interface.checkChoices("Want to add another student? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
        if anotherDec == 'Y':
            User_Interface.Students_func(students,course_list)
        else:
            print('\n')
            print('Students Input completed succesfully.')
        return students
        
    @staticmethod
    def Trainers_func(trainers,course_list,top=False): ##fuction for trainer inputs
        if len(course_list) < 1:
                print("The list with the courses is empty. You can't input trainers.\n Please input  the courses first.")
                return trainers
        if top:
            print('Please give the info about the Trainers.\n')
            
        trainer_firstname = User_Interface.checkEmpty("Give Trainer's first name: ","Wrong input.No data inserted.Please try again.")
        trainer_lastname = User_Interface.checkEmpty("Give Trainer's last name: ","Wrong input.No data inserted.Please try again.")
        trainer_subject = User_Interface.checkEmpty("Give Trainer's subject: ","Wrong input.No data inserted.Please try again.")
        
        trainer_courses = []
        anotherLang = 'Y'
        while anotherLang == 'Y':
            print("Choose Trainer's language from the following language's list: "+','.join([lang.capitalize() for lang in Course.languages])+".")
            print([lang.upper() for lang in Course.languages])
            course_language = User_Interface.checkChoices("Please input the trainer's Language: ",[lang.upper() for lang in Course.languages],'Wrong language.Please give one of: '+','.join([lang.capitalize() for lang in Course.languages])+'.').lower()
            while len(course_list.languageLookup(course_language)) == 0:
                print('List of courses for this Language is Empty. Please choose another language')
                course_language = User_Interface.checkChoices("Please input the trainer's Language: ",[lang.upper() for lang in Course.languages],'Wrong language.Please give one of: '+','.join([lang.capitalize() for lang in Course.languages])+'.').lower()
            
            anotherTitle = 'Y'
            while anotherTitle == 'Y':
                print('Please choose a course title for the trainer, from the following list:')
                print(f"{','.join([course.title for course in course_list.languageLookup(course_language) if course.title not in trainer_courses])}")
                trainer_courses_input = User_Interface.checkChoicesRaw('Please input the title: ',[course.title for course in course_list.languageLookup(course_language)],"Wrong input.Please try again.")
                while trainer_courses_input in trainer_courses:
                    print("You already input this title. Please try another title.")
                    trainer_courses_input = User_Interface.checkChoicesRaw('Please input the title: ',[course.title for course in course_list.languageLookup(course_language)],"Wrong input.Please try again.")
                trainer_courses.append(trainer_courses_input)
                if len([course for course in course_list.languageLookup(course_language) if course.title not in trainer_courses]) == 0:
                    print("No other unique titles available for this language")
                    break
                else:
                    anotherTitle = User_Interface.checkChoices("Want to add another course for this language? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
                    
            anotherLang = User_Interface.checkChoices("Want to add another language for the trainer? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
        
        trainers.append(Trainer( name = trainer_firstname, lastname = trainer_lastname, subject = trainer_subject, courses = trainer_courses))
        anotherDec = User_Interface.checkChoices("Want to add another trainer? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
        if anotherDec == 'Y':
            User_Interface.Trainers_func(trainers,course_list)
        else:
            print('\n')
            print('Trainers Input completed succesfully.')
        return trainers


    @staticmethod
    def Assignments_func(assignments,course_list, top=False): ##fuction for Assignments inputs
        if len(course_list) < 1:
            print("The list with the courses is empty. You can't input assignments.\n Please input  the courses first.")
            return assignments
        
        if top:
            print('Please give the info about the Assignments.\n')
        
        assignment_title = User_Interface.checkEmpty("Give Assignment's title: ","Wrong input.No data inserted.Please try again.")
        assignment_description = User_Interface.checkEmpty("Give Assignment's description: ","Wrong input.No data inserted.Please try again.")
        assignment_submission = User_Interface.checkDate('Give date of submission using the following format : YYYY-MM-DD: ',"%Y-%m-%d","This is the incorrect date string format.It should be YYYY-MM-DD")
        print("Next you need to give assignment's marks for the submitted code and for the oral mark.The number will be in % so the sum of both marks must be equal to 100.\n Give numbers between 0-100.")
        assignment_code_mark = User_Interface.checkInt("Give Assignment's mark for the submitted code: ",'Wrong data type, please give an integer number.')
        assignment_oral_mark = User_Interface.checkInt("Give Assignment's mark for the submitted code: ",'Wrong data type, please give an integer number.')
        while assignment_code_mark + assignment_oral_mark != 100:
            print('Wrong input for the marks. The sum for code mark and oral mark must be 100. E.g. code mark: 65 - oral mark: 35.Try again.')
            assignment_code_mark = User_Interface.checkInt("Give Assignment's mark for the submitted code: ",'Wrong data type, please give an integer number.')
            assignment_oral_mark = User_Interface.checkInt("Give Assignment's mark for the submitted code: ",'Wrong data type, please give an integer number.')
        
        assignment_courses = []
        anotherLang = 'Y'
        while anotherLang == 'Y':
            print("Choose Trainer's language from the following language's list: "+','.join([lang.capitalize() for lang in Course.languages])+".")
            print([lang.upper() for lang in Course.languages])
            course_language = User_Interface.checkChoices("Please input the trainer's Language: ",[lang.upper() for lang in Course.languages],'Wrong language.Please give one of: '+','.join([lang.capitalize() for lang in Course.languages])+'.').lower()
            while len(course_list.languageLookup(course_language)) == 0:
                print('List of courses for this Language is Empty. Please choose another language')
                course_language = User_Interface.checkChoices("Please input the trainer's Language: ",[lang.upper() for lang in Course.languages],'Wrong language.Please give one of: '+','.join([lang.capitalize() for lang in Course.languages])+'.').lower()
            
            anotherTitle = 'Y'
            while anotherTitle == 'Y':
                print('Please choose a course title for the Assignment, from the following list:')
                print(f"{','.join([course.title for course in course_list.languageLookup(course_language) if course.title not in assignment_courses])}")
                trainer_courses_input = User_Interface.checkChoicesRaw('Please input the title: ',[course.title for course in course_list.languageLookup(course_language)],"Wrong input.Please try again.")
                while trainer_courses_input in assignment_courses:
                    print("You already input this title. Please try another title.")
                    trainer_courses_input = User_Interface.checkChoicesRaw('Please input the title: ',[course.title for course in course_list.languageLookup(course_language)],"Wrong input.Please try again.")
                assignment_courses.append(trainer_courses_input)
                if len([course for course in course_list.languageLookup(course_language) if course.title not in assignment_courses]) == 0:
                    print("No other unique titles available for this language")
                    break
                else:
                    anotherTitle = User_Interface.checkChoices("Want to add another course for this language? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
                    
            anotherLang = User_Interface.checkChoices("Want to add another language for the assignment? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
        
        
        assignments.append(Assignment( title = assignment_title, description = assignment_description, submission = assignment_submission, acm = assignment_code_mark, aom = assignment_oral_mark, courses = assignment_courses))
        anotherDec = User_Interface.checkChoices("Want to add another assignment? Type 'y' for yes and 'n' for no.",['Y','N'],'Wrong choice!')
        if anotherDec == 'Y':
            User_Interface.Assignments_func(trainers,course_list)
        else:
            print('\n')
            print('Assignments Input completed succesfully.')
        return assignments

    
    @staticmethod
    def visualization_menu(courses,trainers,students,assignments):  ##visualization menu
        if len(courses)< 1:
            print(User_Interface.divider(79))
            print('Data base is empty. Please make first inputs then try visualization menu.') #print message if database is empty and dont empty visualization menu.
            return
        print('\n\n',User_Interface.divider(56,' VISUALIZATION MENU '))
        print('Please choose what you want to print.\n')
        
        #visualization menu - choices of print
        print(f'1. A collection of all the students ')
        print(f'2. A collection of all the trainers')
        print(f'3. A collection of all the assignments ')
        print(f'4. A collection of all the courses ')
        print(f'5. All the students per course ')
        print(f'6. All the trainers per course ')
        print(f'7. All the assignments per course ')
        print(f'8. All the assignments per student per course ')
        print(f'9. All the students that belong to more than one courses ')
        print(f'10.Exit')       
        print(User_Interface.divider(79))
        
        ch_v = int(User_Interface.checkChoices('Enter your choice [1-10]: ',['1','2','3','4','5','6','7','8','9'],'Wrong Choise..Please enter an integer between 1-9.'))
                            
        print(User_Interface.divider(79))

        if ch_v == 1: #print of collection of all the students
            print('A collection of all the students:\n')
            for student in students:
                print(student)
        elif ch_v == 2: #print of collection of all the trainers
            print('A collection of all the trainers:\n')
            for trainer in trainers:
                print(trainer)
        elif ch_v == 3: #print of collection of all the assignments
            print('A collection of all the assignments:\n')
            for assignment in assignments:
                print(assignment)
        elif ch_v == 4: #print of collection of all the course
            print('A collection of all the courses:\n')
            for course in courses:
                print(course)
        elif ch_v ==5: #print of collection of all the students per course
            print('A collection of all the students per course:\n')
            for course in courses:
                print("\nStudents for course "+str(course.title)+": ")
                for student in students.lookupCourse(course.title):
                    print(student)
        elif ch_v == 6: #print of collection of all the trainers per course
            print('A collection of all the trainers per course:\n')
            for course in courses:
                print("\nTrainers for course "+str(course.title)+": ")
                for trainer in trainers.lookupCourseT(course.title):
                    print(trainer)
        elif ch_v == 7: #print of collection of all the assignments per course
            print('A collection of all the assignments per course:\n')
            for course in courses:
                print("\nAssignments for course "+str(course.title)+": ")
                for assignment in assignments.lookupCourseA(course.title):
                    print(assignment)
        elif ch_v == 8: #print of collection of all the assignments per student per course
            print('A collection of all the assignments per student per course:\n')
            for student in students:
                print("\nAssignments for student "+student.name+" "+student.lastname)
                for course in courses:
                    print(" \nAssigments for course "+course.title)
                    if student.hasCourse(course.title):
                        for assignment in assignments.lookupCourseA(course.title):
                            print(' ',assignment)
        elif ch_v == 9: #All the students that belong to more than one courses
            print('All the students that belong to more than one courses:\n')
            for student in students.lookupMoreThanOne():
                print(student)
        else:  #exit visualization menu
            print('\n')

    @staticmethod
    def exitprogram(): #prints for exit
        print(User_Interface.divider(79))
        print(User_Interface.divider(79))
        print('Program terminated. Thanks for using it.\nCopyrights: Pantelakis Ioannis')

        
